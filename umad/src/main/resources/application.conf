umad: {
  shouldThrowExceptions: false
  shouldPrintStackTrace: true
  intervalMs: 60000
  verbose: false
  monitor: {
    enabled: true
    includes: [
      {
        class: "scala\\.(reflect|tools)\\..*"
        method: ".*_\\$eq"
      },
      {
        class: "scala\\.collection\\.mutable\\..*"
        method: ".*"
        onlyPublicMethods: true
        ifCalledFrom: "scala\\.(reflect|tools)\\..*"
      },
      {
        class: "scala\\.Array"
        method: ".*"
        onlyPublicMethods: true
        ifCalledFrom: "scala\\.(reflect|tools)\\..*"
      },
      {
        class: "java\\.util\\..*"
        method: ".*"
        onlyPublicMethods: true
        ifCalledFrom: "scala\\.(reflect|tools)\\..*"
      }
    ]
    excludes: [
      {
        class: "java\\.util\\.concurrent\\.ConcurrentHashMap"
        method: ".*"
      }
      // Exclude constructors
      {
        class: "scala\\.collection\\.mutable\\..*\\$"
        method: "apply"
      },
      // Fixed by enabling `Names.synchronizeNames`
      {
        class: "scala\\.reflect\\.internal\\.SymbolTable"
        method: "nc_\\$eq"
      },
      // Fixed by introducing WorkerThreadLocal but too complicated to be autodetect
      {
        class: "scala\\.tools\\.nsc\\.Global"
        method: "reporter_\\$eq"
      },
      { // Var on traits get coverted into messy method calls chains - maybe we need to look at it at some poitn
        class: "scala\\.reflect\\.internal\\.SymbolTable\\$perRunCaches\\$"
        method: "caches_\\$eq"
      },
      { // Var on traits get coverted into messy method calls chains - maybe we need to look at it at some poitn
        class: "scala\\.reflect\\.internal\\.SymbolTable"
        method: "scopeCount_\\$eq"
      },
      { // Synchronization should be detected in _= method
        class: "scala\\.reflect\\.internal\\.SymbolTable"
        method: "infoTransformers_\\$eq"
      },
      { // Synchronization should be detected in _= method
        class: "scala\\.reflect\\.internal\\.SymbolTable"
        method: "_infoTransformers_\\$eq"
      },
      { // Var on traits get coverted into messy method calls chains - maybe we need to look at it at some poitn
        class: "scala\\.tools\\.nsc\\.Global\\$\\$anon\\$1"
        method: "lastTreeToTyper_\\$eq"
      },
      { // Var on traits get coverted into messy method calls chains - maybe we need to look at it at some poitn
        class: "scala\\.tools\\.nsc\\.Global\\$\\$anon\\$1"
        method: "lastTreeToTyper_\\$eq"
      },
      { // Var on traits get coverted into messy method calls chains - maybe we need to look at it at some poitn
        class: "scala\\.reflect\\.internal\\.SymbolTable"
        method: "subsametypeRecursions_\\$eq"
      },
      { // Var on traits get coverted into messy method calls chains - maybe we need to look at it at some poitn
        class: "scala\\.reflect\\.internal\\.SymbolTable"
        method: "basetypeRecursions_\\$eq"
      },
      { // Var on traits get coverted into messy method calls chains - maybe we need to look at it at some poitn
        class: "scala\\.reflect\\.internal\\.SymbolTable"
        method: "lockedCount_\\$eq"
      },
      { // Var on traits get coverted into messy method calls chains - maybe we need to look at it at some poitn
        class: "scala\\.reflect\\.internal\\.SymbolTable"
        method: "skolemizationLevel_\\$eq"
      },
      { //Synchronization should be detected in _= method
        class: "scala\\.reflect\\.internal\\.tpe\\.TypeConstraints\\$UndoLog"
        method: "log_\\$eq"
      },
      { // Var on traits get coverted into messy method calls chains - maybe we need to look at it at some poitn
        class: "scala\\.tools\\.nsc\\.Global\\$\\$anon\\$1"
        method: "lastAccessCheckDetails_\\$eq"
      },
    ],
    safeIndicators: [
      {
        clazz: "scala.reflect.internal.util.Parallel$WorkerOrMainThreadLocal",
        methods: [
          "set(Ljava/lang/Object;)V",
          "get()Ljava/lang/Object;"
        ]
      },
      {
        clazz: "scala.reflect.internal.util.Parallel$WorkerThreadLocal",
        methods: [
          "set(Ljava/lang/Object;)V",
          "get()Ljava/lang/Object;"
        ]
      },
      {
        clazz: "scala.reflect.internal.util.Parallel$Counter",
        methods: [
          "set(I)I",
          "get()I"
        ]
      },
      {
        clazz: "java.lang.ThreadLocal",
        methods: [
          "set(Ljava/lang/Object;)V",
          "get()Ljava/lang/Object;"
        ]
      },
      {
        clazz: "scala.runtime.BoxesRunTime",
        methods: [
          "boxToInteger(I)Ljava/lang/Integer;"
        ]
      },
    ],
    "synchronizeIndicators" : [
      "scala.reflect.internal.util.Parallel$.synchronizeAccess"
    ]
  }

  chaos: {
    enabled: false
    sleepTime: 100
    sleepThreshold: 100
    methodPercent: 10
    includes: [
      {
        class: ".*\\.Trees\\$Tree.*"
        method: ".*"
      },
      {
        class: ".*Parsers\\$Parser"
        method: ".*"
      }
    ]
    excludes: []
  }
}
